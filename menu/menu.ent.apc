{ Application 'menu' logic file generated by CSPro }
PROC GLOBAL

function Login()

	// set the M_CURRENT_X variables as if we had gone through a full login process
	M_CURRENT_PROVINCE = 1;
	M_CURRENT_DISTRICT = 1;
	M_CURRENT_EA = 2;
	
end;

function PrintNumericList(list numeric numeric_list)

	string output;
	do numeric i =1 while i <= numeric_list.length()
		if length(output) = 0 then
			output = maketext("%v", numeric_list(i));
		else
			output = output + maketext(", %v", numeric_list(i));
		endif;
	enddo;
	
	errmsg(output);
	
end;

function PrintStringList(list string numeric_list)

	string output;
	do numeric i =1 while i <= numeric_list.length()
		if length(output) = 0 then
			output = numeric_list(i);
		else
			output = output + ", " +  numeric_list(i);
		endif;
	enddo;
	
	errmsg(output);
	
end;

function QueryStructures(list numeric structure_list)

	numeric begin = timestamp();
	numeric frame_data = tonumber(CS.Sqlite.open(name := "PSC_FRAME_DICT"));				   
	string frame_subkey = maketext("%v%v%v", M_CURRENT_PROVINCE, M_CURRENT_DISTRICT, M_CURRENT_EA);
	
	string result = CS.Sqlite.exec(db := frame_data,
				   sql := "SELECT `level-1`.`f_structure` FROM `cases` "
						  "JOIN `level-1` ON `level-1`.`case-id` = `cases`.`id` "
						  "WHERE `cases`.`key` LIKE '" + frame_subkey + "%' "
						  "AND `cases`.`deleted` = 0",
				   rowFormat := "scalarArray");
	
	if result <> "" then
		structure_list.updateValueFromJson(result);
	endif;
		
	// close the database
	CS.Sqlite.close(db := frame_data);
	numeric done = timestamp();
	errmsg("Query duration: %d", done - begin);

end;

function GetStructuresStartswith(list numeric structure_list)

	numeric begin = timestamp();
	forcase PSC_FRAME_DICT(startswith, maketext("%v%v%v", M_CURRENT_PROVINCE, M_CURRENT_DISTRICT, M_CURRENT_EA)) do
		structure_list.add(F_STRUCTURE);
	endfor;
	numeric done = timestamp();
	errmsg("Forcase duration: %d", done - begin);

end;

function GetStructuresWhereClause(list numeric structure_list)

	numeric begin = timestamp();
	forcase PSC_FRAME_DICT where F_PROVINCE = M_CURRENT_PROVINCE and F_DISTRICT = M_CURRENT_DISTRICT and F_EA = M_CURRENT_EA do
		structure_list.add(F_STRUCTURE);
	endfor;
	
	numeric done = timestamp();
	errmsg("Forcase duration: %d", done - begin);

end;

function QueryFrameKeys(list string frame_key_list) 

	numeric frame_data = tonumber(CS.Sqlite.open(name := "PSC_FRAME_DICT"));				   
	string frame_subkey = maketext("%v%v%v", M_CURRENT_PROVINCE, M_CURRENT_DISTRICT, M_CURRENT_EA);
	
	string result = CS.Sqlite.exec(db := frame_data,
				   sql := "SELECT `cases`.`key` FROM `cases` "
						  "WHERE `cases`.`key` LIKE '" + frame_subkey + "%' "
						  "AND `cases`.`deleted` = 0",
				   rowFormat := "scalarArray");
	
	if result <> "" then
		frame_key_list.updateValueFromJson(result);
	endif;
		
	// close the database
	CS.Sqlite.close(db := frame_data);
	
end;

PROC MENU_FF

preproc

	Login();
	
PROC M_MENU

onfocus
	
	$ = notappl;
	
postproc

	if $ = 1 then
		skip to M_SPEED_COMPARISON;
	elseif $ = 2 then
		list string frame_key_list;
		QueryFrameKeys(frame_key_list);
		//PrintStringList(frame_key_list);
		reenter;
	endif;

PROC M_SPEED_COMPARISON

onfocus

	$ = notappl;
	
postproc

	list numeric structure_list;
	
	if $ = 1 then
		QueryStructures(structure_list);
	elseif $ = 2 then
		GetStructuresStartswith(structure_list);
	else
		GetStructuresWhereClause(structure_list);
	endif;
	
	//PrintNumericList(structure_list);

reenter;
